name: ec2-pipeline.yml

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME : Matzipbook
  BUILD_NAME : Matzipbook

permissions:
  contents: read

jobs:
  ec2-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up secret.yml
        run: |
          cd ./src/main/resources
          touch ./application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./application-secret.yml
          ls -a .

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Run asciidoc mv static/html
        run: |
          ./gradlew asciidoctor
          mkdir -p src/main/resources/static/docs
          cp -r build/docs/asciidoc/* src/main/resources/static/docs/

      - name: PR and PUSH Test Verification
        run: ./gradlew test

      - name: Docker push image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/arm64/v8 -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

      - name: AWS deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}

          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

            sudo docker stop Matzipbook || true
            sudo docker rm Matzipbook || true

            sudo docker run -v /home/${{ secrets.EC2_USER }}/elk/logs:/logs -d --log-driver=syslog -p 443:8080 --name Matzipbook --network Matzipbook-network -e spring.profiles.active=release -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

            sudo docker container prune -f

            sudo docker image prune -f

            sudo docker images ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }} -q | awk 'NR>1' | xargs -r sudo docker rmi -f